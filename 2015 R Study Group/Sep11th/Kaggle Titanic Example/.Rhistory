sdata$x1s <- data$x1^2
sdata$x1c <- data$x1^3
# summary see if improved?
# polynomial regression
summary(lm(y~x1, data))
summary(lm(y~x1+x1s, sdata))
summary(lm(y~x1+x1s+x1c, sdata))
# log-log linear regression model
llrmodel <- lm(log(y)~log(x1), data)
summary(llrmodel)
# unadjusted prediction
exp(cbind(rep(1,nrow(data)), log(data$x1)) %*% llrmodel$coefficients)
ujp <- exp(predict(llrmodel, data))
ujp
# adjuestd prediction
ajp <- exp(predict(llrmodel, data)+summary(llrmodel)$sigma^2/2)
ajp
# see prediction measure
cor(ujp, data$y)
cor(ajp, data$y)
sum((ujp-data$y)^2)
sum((ajp-data$y)^2)
# logarithmic model
lmodel <- lm(y~log(x1), data)
summary(lmodel)
cbind(rep(1,nrow(data)), log(data$x1)) %*% lmodel$coefficients
lp <- predict(lmodel, data)
lp
cor(lp, data$y)
sum((lp-data$y)^2)
# exponential model
emodel <- lm(log(y)~x1, data)
summary(emodel)
ep <- exp(predict(emodel, data)+summary(emodel)$sigma^2/2)
cor(ep, data$y)
sum((ep-data$y)^2)
# Chapter 17 Regression Models with Dummy Variables
# Dummy Variables
# dummy variable transformation function
dummyEncoding <- function(df, colname){
dummyDf <- as.data.frame(model.matrix(~df[,colname]))
names(dummyDf) <- paste(colname,as.character(levels(df[,colname])),sep="")
df[,colname] <- NULL
df <- cbind(df,dummyDf[,2:ncol(dummyDf)])
df
}
tdata <- data
tdata$x3 <- as.factor(tdata$x3)
dtdata <- dummyEncoding(tdata, "x3")
# individual t test
summary(lm(y~., tdata))
summary(lm(y~., dtdata))
# partial F test
modelwd <- lm(y~., dtdata)
modelwod <- lm(y~x1+x2, dtdata)
anova(modelwd, modelwod)
# interaction term
anova(lm(y~.+x2*x3, tdata),lm(y~.,tdata))
# binary variable
# linear probability model LPM
data$yp <- c(1,1,0,1,0,1,1,0)
lpm <- lm(yp ~ x1+x2, data)
predict(lpm, cbind.data.frame(x1,x2))
# logistic regression
logitmodel <- glm(yp~ x1 + x2, family = "binomial", data)
logit <- predict(logitmodel, data[,2:3])
exp(logit)/(1+exp(logit))
# Chapter 18 Time Series and Forecasting
# Smoothing techniques
library(tseries)
library(PerformanceAnalytics)
VBLTX_prices <- get.hist.quote(instrument="vbltx", start="2005-09-01", end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo", quiet = TRUE)
FMAGX_prices <- get.hist.quote(instrument="fmagx", start="2005-09-01", end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo", quiet = TRUE)
SBUX_prices <- get.hist.quote(instrument="sbux", start="2005-09-01",end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo", quiet = TRUE)
index(VBLTX_prices) <- as.yearmon(index(VBLTX_prices))
index(FMAGX_prices) <- as.yearmon(index(FMAGX_prices))
index(SBUX_prices) <- as.yearmon(index(SBUX_prices))
all_prices <- merge(VBLTX_prices, FMAGX_prices, SBUX_prices)
colnames(all_prices) <- c("VBLTX", "FMAGX", "SBUX")
movingAverage <- function(ts, m){
nobs <- length(ts)
MAs <- vector()
for (i in 1:nobs){
if (i < m){
MAs <- c(MAs, NA)
}
else{
MAs <- c(MAs, mean(ts[(i-m+1):i]))
}
}
MAs
}
VBLTX_5_MA <- movingAverage(all_prices[,"VBLTX"], 5)
plot(x = c(1:length(VBLTX_5_MA)), y = VBLTX_prices, lwd = 2, type = "l", col = "black")
lines(c(2:(length(VBLTX_5_MA)+1)), VBLTX_5_MA, lwd = 2, col = "blue")
exponentialSmoothing <- function(ts, alpha = 0.2){
EAs <- vector()
EAs <- c(EAs, ts[1])
nobs <- length(ts)
for (i in 2:nobs){
EAs <- c(EAs, (alpha*ts[i]+(1-alpha)*EAs[i-1]))
}
EAs
}
VBLTX_EA <- exponentialSmoothing(all_prices[,"VBLTX"], 0.5)
lines(c(2:(length(VBLTX_EA)+1)), VBLTX_EA, type = "l", lwd = 2, col = "green")
#
SBUX_prices
movingAverage(SBUX_prices,4)
SBUX_MA4 <- movingAverage(SBUX_prices,4)
SBUX_MA4[2:(length(SBUX_MA4)-1)] + SBUX_MA4[3:length(SBUX_MA4)]
(SBUX_MA4[2:(length(SBUX_MA4)-1)] + SBUX_MA4[3:length(SBUX_MA4)])/2
length(SBUX_prices)
length(CMA)
SBUX_MA4 <- movingAverage(SBUX_prices,4)
CMA <- (SBUX_MA4[2:(length(SBUX_MA4)-1)] + SBUX_MA4[3:length(SBUX_MA4)])/2
length(CMA)
ratio_to_MA <- SBUX_prices[1:(length(SBUX_prices)-2)]/CMA
ratio_to_MA
index(CMA)
index(ratio_to_MA)
?as.yearmon()
index(ratio_to_MA)[1]
a <- index(ratio_to_MA)[1]
a
class(a)
as.Date(index(ratio_to_MA)[1])
as.Date(index(ratio_to_MA)[1])$m
b <- as.Date(index(ratio_to_MA)[1])
b
class(b)
b <- as.POSIXct(index(ratio_to_MA)[1])
b
b$d
index(ratio_to_MA)
index(ratio_to_MA)[1]
index(ratio_to_MA)[1][4:]
index(ratio_to_MA)[1].split()
index(ratio_to_MA)[1].strsplit(" ")
strsplit(index(ratio_to_MA)[1]," ")
as.character(index(ratio_to_MA))
as.character(index(ratio_to_MA))[1]
as.character(index(ratio_to_MA))[1][4:]
as.character(index(ratio_to_MA))[1][4:5]
strsplit(as.character(index(ratio_to_MA))[1]," ")
strsplit(as.character(index(ratio_to_MA))[1]," ")[2]
strsplit(as.character(index(ratio_to_MA))[1]," ")[[1]]
strsplit(as.character(index(ratio_to_MA))[1]," ")[[1]][2]
strsplit(as.character(index(ratio_to_MA))," ")[[1]][2]
strsplit(as.character(index(ratio_to_MA))," ")
index(ratio_to_MA)
as.Date(index(ratio_to_MA))
strptime(index(ratio_to_MA),"%m")
strptime(as.Date(index(ratio_to_MA)),"%m")
as.Date(index(ratio_to_MA))
a = as.Date(index(ratio_to_MA))[1]
a
strptime(a, fomart = "%m")
strptime(a, format = "%m")
strptime(a, format = "%M")
strptime(a, format = "%m")
?as.Date
?as.Date()
?as.Date()\
?as.Date()
as.Date(index(ratio_to_MA))
as.Date(index(ratio_to_MA),format = "%m")
as.Date(index(ratio_to_MA),format = "%m")
ratio_to_MA
strptime(index(ratio_to_MA))
strptime(index(ratio_to_MA), "%m")
strptime(index(ratio_to_MA), format = "%m")
strptime(as.Date(index(ratio_to_MA)), format = "%m")
as.Date(index(ratio_to_MA))
strptime(as.Date(index(ratio_to_MA)), "%Y-%m-%d")
a <- strptime(as.Date(index(ratio_to_MA)), "%Y-%m-%d")
a
a$m
a[1]$m
a[1
]
a <- strptime(as.Date(index(ratio_to_MA)), "%Y-%m-%d")
a
class(a)
a$h
a$wday
a$mon
index(ratio_to_MA)
index(ratio_to_MA)$mon
as.Date(index(ratio_to_MA))$mon
as.POSIXlt(index(ratio_to_MA))$mon
index(ratio_to_MA) <- as.POSIXlt(index(ratio_to_MA))$mon
as.POSIXlt(index(ratio_to_MA))$mon
index(ratio_to_MA) <- as.factor(as.POSIXlt(index(ratio_to_MA))$mon)
orders <- as.factor(as.POSIXlt(index(ratio_to_MA))$mon)
orders
months <- as.factor(as.POSIXlt(index(ratio_to_MA))$mon)
d <- cbind.data.frame(ratio_to_MA,months)
d
df <- cbind.data.frame(ratio_to_MA,months)
dbyMon <- group_by(df, months)
names(df)
summarise(dbyMon, seasonalindex = median(ratio_to_MA))
summarise(dbyMon, seasonalindex = median(ratio_to_MA, na.rm = T))
summarise(dbyMon, unadj.seaind = median(ratio_to_MA, na.rm = T))
seaind <- summarise(dbyMon, unadj.seaind = median(ratio_to_MA, na.rm = T))
seaind
seaind$adj.seaind <- seaind$unadj.seaind*12/sum(seaind$unadj.seaind)
seaind
seaind$adj.seaind
SBUX_prices
SBUX_df <- cbind.data.frame(SBUX_prices, as.factor(as.POSIXlt(index(SBUX_prices))$mon))
SBUX_df
names(SBUX_df)[2] = "months"
SBUX_df
seaind$adj.seaind
seaind
inner_join(SBUX_df, seaind, by = "months")
SBUX_df <- inner_join(SBUX_df, seaind, by = "months")
SBUX_df$SeaAdj.prices <- SBUX_df$AdjClose/SBUX_df$adj.seaind
SBUX_df
plot(SBUX_df$SeaAdj.prices)
plot(SBUX_df$SeaAdj.prices, pch = 19)
SBUX_df
SBUX_df$t <- 1:nrow(SBUX_df)
summary(lm(SeaAdj.prices~t+(t^2), data=SBUX_df))
SBUX_df$t2 <- (1:nrow(SBUX_df))^2
plot(SBUX_df$SeaAdj.prices, pch = 19)
summary(lm(SeaAdj.prices~t+t2, data=SBUX_df))
500/(1+15/100)
sqrt((2*147*290*12)/0.2)
sqrt((2*147*290*12)/20)
mu = (160+350+1040)/3
mu
sd = sqrt((1/18)*(160^2+350^2+1040^2-160*350-160*1040-350*1040))
sd
mu = (160+350+1040)*58/3
sd = sqrt((1/18)*((160*58)^2+(350*58)^2+(1040*58)^2-160*58*58*350-160*58*58*1040-350*58*58*1040))
mu
sd
c = 1:50000
c
c = seq(10000,50000,100)
c
cs = (0.525-0.21)
1/(1+0.21)
CR <- 1/(1+0.21)
CR
a = 160*58
c = 350*58
b = 1040*58
mu = (a+b+c)/3
sd = sqrt((1/18)*(a^2+b^2+c^2-a*b-a*c-b*c))
mu
sd
d = 1-CR
d
pd = 1-CR
d = b-sqrt(pd*(b-a)*(b-c))
d
d
mu
d
CR
1-CR
(1-CR)*sd
mu+(1-CR)*sd
1-CR
CR
1/(1+0.21)
1/(1+0.21)
cr
CR
d = b-sqrt((1-CR)*(b-a)*(b-c))
d
d
(d-mu)/sd
CR
CR=(1+0.525-0.21)/((1+0.525-0.21)+0.21)
CR
1-CR
d = b-sqrt((1-CR)*(b-a)*(b-c))
d
1058*250+250*4/365*0.17*53400
c1 <- 1058*250+250*4/365*0.17*53400
c1
c2 <- 1225*250+250*2/365*0.17*53400
c2
c2-c1
c = 3.34
ct = 1000
D = 400000
RMSE = 36000
h=0.15
ce = h*c
CSL=0.95
L = 1/12
EOQ <- sqrt(2*ct*D/ce)
EOQ
sqrt(2*ct*D/ce)/1000
EOQ <- round(sqrt(2*ct*D/ce)/1000,0)*1000
EOQ
D/EOQ
T = D/EOQ
T
T = 1/N
T
N = D/EOQ
N
T = 1/N
T
sigma_DL = 36000
qnorm(0.95)
mu = D/10
mu
s = mu + k*sigma_DL
k = qnorm(0.95)
mu = D/10
s = mu + k*sigma_DL
sigma_DL
s = mu + k*sigma_DL/sqrt(10)
s = mu + k*sigma_DL
mu
sigma_DL
s = mu + k*sigma_DL/sqrt(10)
s
round(s/100,0)*100
s = mu + k*sigma_DL
round(s/100,0)*100
EOQ*ce/D/cs
mu = D/12
s = mu + k*sigma_DL/sqrt(12)
round(s/100,0)*100
ct*10
ct*N
EOQ*c
EOQ*c/2
EOQ*c/2
EOQ*c/2*N
EOQ*ce/2*N
EOQ*ce/2
ce*k*sigma_DL/sqrt(12)
round(ce*k*sigma_DL/sqrt(12),0)
L
ce*D*L
ce*D*L+round(ce*k*sigma_DL/sqrt(12),0)+EOQ*ce/2+ct*N
EOQ
k = qnorm(0.95)
mu_new = D/24
s_new = mu_new + k*sigma_DL/sqrt(24)
round(s_new/100,0)*100
ct*N
EOQ*ce/2
round(ce*k*sigma_DL/sqrt(24),0)
L
ce*D*1/24
ce*D*1/24 + round(ce*k*sigma_DL/sqrt(24),0) + EOQ*ce/2 + ct*N
EOQ
k = qnorm(0.95)
mu = D/12
s_low_RMSE = mu_new + k*18000/sqrt(12)
round(s_low_RMSE/100,0)*100
ct*N
sigma_DL
k = qnorm(0.95)
mu = D/12
s_low_RMSE = mu + k*18000/sqrt(12)
round(s_low_RMSE/100,0)*100
EOQ*ce/2
round(ce*k*18000/sqrt(12),0)
ce*D*1/12
ce*D*1/12 + round(ce*k*18000/sqrt(12),0) + EOQ*ce/2 + ct*N
ce*D*1/12 + round(ce*k*18000/sqrt(12),0) + EOQ*ce/2 + ct*N
L
sigma_DL
D
k
k*18000
ce*D*1/12 + round(ce*k*18000/sqrt(12),0) + EOQ*ce/2 + ct*N
ce*D*1/15+round(ce*k*sigma_DL/sqrt(15),0)+EOQ*ce/2+ct*N
12/15
12/15
w = c(0.5,2,6.5,15,35)
p = c(3.5,5.5,8.5,10.5)
lm(x = w[1:4], y = p)
data <- cbincbind.data.frame(w[1:4], p)
data <- cbind.data.frame(w[1:4], p)
data
names(data) <- c("midPoint","price")
data
model <- lm(price~midPoint, data = data)
model
w[5]*0.451+4.294
train <- read.csv(file.choose(),
header = T,
stringsAsFactors = F)
train
View(train)
str(train)
head(train)
factor(train$Survived)
train$Survived <- factor(train$Survived)
str(train)
factor(train$Pclass)
train$Pclass <- factor(train$Pclass)
str(train)
formula = formula("Survived~Pclass+Sex+Age+Cabin")
?lm
?glm
model <- glm(formula, data = train, family = "binomial")
model
model$fitted.values
model$fitted.values > 0.5
table(model$fitted.values > 0.5, train$Survived)
model$fitted.values
length(model$fitted.values)
nrow(train)
model <- glm(formula, data = train, family = "binomial",na.omit)
table(model$fitted.values > 0.5, train$Survived)
model <- glm(formula, data = train, family = "binomial", na.omit= T)
train
model <- glm(formula, data = train, family = "binomial")
predict(model, train)
train$Cabin
level(train$Cabin)
formula = formula("Survived~Pclass+Sex+Age")
model <- glm(formula, data = train, family = "binomial")
model
predict(model, train)
model$fitted.values
table(model$fitted.values > 0.5, train$Survived)
model <- glm(formula, data = train, family = "binomial")
table(model$fitted.values > 0.5, train$Survived)
model$fitted.values
model$fitted.values > 0.5
train$Survived
length(train$Survived)
table(model$fitted.values > 0.5, train$Survived)
length(model$fitted.values > 0.5)
formula = formula("Survived~Pclass+Sex+Age")
model <- glm(formula, data = train, family = "binomial")
table(model$fitted.values > 0.5, train$Survived)
model$fitted.values
length(model$fitted.values)
predict(model, train)
predict(model, train) > 0.5
table(predict(model, train) > 0.5, train$Survived)
conTable <- table(predict(model, train) > 0.5, train$Survived)
conTable
(117+392)/sum(conTable)
test <- read.csv(fil.choose(),
header = T,
stringsAsFactors = F)
test <- read.csv(file.choose(),
header = T,
stringsAsFactors = F)
test
str(test)
test$Pclass <- factor(test$Pclass)
test$Sex <- factor(test$Sex)
predict(model, test, type = "response")
predict(model, test, type = "class")
predict(model, test)
predict(model, test) > 0.5
predict(model, test, type = "term")
predict(model, test, type = "link")
if(predict(model, test) > 0.5) 1 else 0
if(testpredcit > 0.5) 1 else 0
testpredcit <- predict(model, test)
if(testpredcit > 0.5) 1 else 0
ifelse(testpredcit > 0.5,1,0)
random()
runif(0,1)
runif(1,0,1)
runif(1,0,1)
ifelse(is.na(testpredict),runif(1,0,1),testpredict)
testpredcit <- predict(model, test)
ifelse(is.na(testpredict),runif(1,0,1),testpredict)
testpredcit
testpredict <- predict(model, test)
ifelse(is.na(testpredict),runif(1,0,1),testpredict)
prediction <- ifelse(testpredcit > 0.5,
1,
0)
str(test)
submit <- cbind.data.frame(PassengerId = test$PassengerId,
Survived = prediction)
submit
testpredict <- predict(model, test)
testpredict <- ifelse(is.na(testpredict),
runif(1,0,1),
testpredict)
prediction <- ifelse(testpredcit > 0.5,
1,
0)
prediction <- ifelse(testpredict > 0.5,
1,
0)
prediction
submit <- cbind.data.frame(PassengerId = test$PassengerId,
Survived = prediction)
write.csv(file = "simpleLogisticRegression.csv",
submit,
header = T,
row.names = F)
write.csv(file = "simpleLogisticRegression.csv",
submit,
row.names = F)
setwd("D:/GithubRepos/Think_R/2015 R Study Group/Kaggle Titanic Example")
write.csv(file = "simpleLogisticRegression.csv",
submit,
row.names = F)
