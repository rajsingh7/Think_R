c2
c2-c1
c = 3.34
ct = 1000
D = 400000
RMSE = 36000
h=0.15
ce = h*c
CSL=0.95
L = 1/12
EOQ <- sqrt(2*ct*D/ce)
EOQ
sqrt(2*ct*D/ce)/1000
EOQ <- round(sqrt(2*ct*D/ce)/1000,0)*1000
EOQ
D/EOQ
T = D/EOQ
T
T = 1/N
T
N = D/EOQ
N
T = 1/N
T
sigma_DL = 36000
qnorm(0.95)
mu = D/10
mu
s = mu + k*sigma_DL
k = qnorm(0.95)
mu = D/10
s = mu + k*sigma_DL
sigma_DL
s = mu + k*sigma_DL/sqrt(10)
s = mu + k*sigma_DL
mu
sigma_DL
s = mu + k*sigma_DL/sqrt(10)
s
round(s/100,0)*100
s = mu + k*sigma_DL
round(s/100,0)*100
EOQ*ce/D/cs
mu = D/12
s = mu + k*sigma_DL/sqrt(12)
round(s/100,0)*100
ct*10
ct*N
EOQ*c
EOQ*c/2
EOQ*c/2
EOQ*c/2*N
EOQ*ce/2*N
EOQ*ce/2
ce*k*sigma_DL/sqrt(12)
round(ce*k*sigma_DL/sqrt(12),0)
L
ce*D*L
ce*D*L+round(ce*k*sigma_DL/sqrt(12),0)+EOQ*ce/2+ct*N
EOQ
k = qnorm(0.95)
mu_new = D/24
s_new = mu_new + k*sigma_DL/sqrt(24)
round(s_new/100,0)*100
ct*N
EOQ*ce/2
round(ce*k*sigma_DL/sqrt(24),0)
L
ce*D*1/24
ce*D*1/24 + round(ce*k*sigma_DL/sqrt(24),0) + EOQ*ce/2 + ct*N
EOQ
k = qnorm(0.95)
mu = D/12
s_low_RMSE = mu_new + k*18000/sqrt(12)
round(s_low_RMSE/100,0)*100
ct*N
sigma_DL
k = qnorm(0.95)
mu = D/12
s_low_RMSE = mu + k*18000/sqrt(12)
round(s_low_RMSE/100,0)*100
EOQ*ce/2
round(ce*k*18000/sqrt(12),0)
ce*D*1/12
ce*D*1/12 + round(ce*k*18000/sqrt(12),0) + EOQ*ce/2 + ct*N
ce*D*1/12 + round(ce*k*18000/sqrt(12),0) + EOQ*ce/2 + ct*N
L
sigma_DL
D
k
k*18000
ce*D*1/12 + round(ce*k*18000/sqrt(12),0) + EOQ*ce/2 + ct*N
ce*D*1/15+round(ce*k*sigma_DL/sqrt(15),0)+EOQ*ce/2+ct*N
12/15
12/15
w = c(0.5,2,6.5,15,35)
p = c(3.5,5.5,8.5,10.5)
lm(x = w[1:4], y = p)
data <- cbincbind.data.frame(w[1:4], p)
data <- cbind.data.frame(w[1:4], p)
data
names(data) <- c("midPoint","price")
data
model <- lm(price~midPoint, data = data)
model
w[5]*0.451+4.294
?knitr
?rmarkdown
data <- read.csv("D:/Study/Bentley/ST625/Lecture1/StudentScoreData.csv", header = T)
View(data)
sum(data$Midterm.Score - mean(data$Midterm.Score))
sum((data$Midterm.Score - mean(data$Midterm.Score))^2)
Sxy = sum(data$Midterm.Score * data$Final.Average)
SSxx = sum((data$Midterm.Score - mean(data$Midterm.Score))^2)
Sigma_b1 = Sxy/sqrt(SSxx)
Sigma_b1
summary(lm(Final.Average~Midterm.Score, data))
model = lm(Final.Average~Midterm.Score, data)
summary(model)
confint(model)
1.2258 + 0.1625 * c(-1,1)
1.2258 + 1.96 * 0.1625 * c(-1,1)
1.2258 + 2 * 0.1625 * c(-1,1)
sum((data$Midterm.Score - mean(data$Midterm.Score))^2)
Sxy = sum(data$Midterm.Score * data$Final.Average)
Sxy
Sigma_Y = with(data, sqrt(sum((Final.Average - mean(Final.Average))^2)/(n-1)))
Sigma_Y
Sx = sum(data$Midterm.Score)
SSx = sum(data$Midterm.Score^2)
Sy = sum(data$Final.Average)
SSy = sum(data$Final.Average^2)
Sxy = sum(data$Midterm.Score * data$Final.Average)
n = nrow(data)
a = (SSx*Sy -Sx*Sxy)/(n*SSx-Sx^2)
b = (n*Sxy - Sx*Sy)/(n*SSx-Sx^2)
a;b
Sigma_Y = with(data, sqrt(sum((Final.Average - mean(Final.Average))^2)/(n-1)))
Sigma_Y
Sigma_Y / sqrt(SSxx)
sqrt((n*SSy-Sy^2)/(n*(n-1)))
model <- lm(Final.Average~Midterm.Score, data)
Sigma_YX <- sqrt(sum((model$fitted.values - data$Final.Average)^2)/model$df.residual)
Sigma_YX
Sigma_YX/Sigma_Y
sqrt((SSy-a*Sy-b*Sxy)/(15-2))
SSxx
sqrt(SSxx)
Sigma_YX / sqrt(SSxx)
b
b + qt(0.025)
b + qt(0.025,0,1)
b + pt(0.025,0,1)
b + pt(0.025)
b
b + pt(0.025, 0, 1, df = 13)
b + pt(0.025, 0, 1, df = 13)*Sigma_b1 * c( -1, 1)
Sigma_b1
Sigma_b1 <- Sigma_YX / sqrt(SSxx)
b + pt(0.025, 0, 1, df = 13)*Sigma_b1 * c( -1, 1)
Sigma_b1
b
a
b
pt(0.025, 0, 1, df = 13)
b + qt(0.025, 0, 1, df = 13) * Sigma_b1 * c( -1, 1)
confInt = predict(model, data, interval = "confidence")
predInt = predict(model, data, interval = "prediction")
confInt
predInt
summary(model)
1.2258/0.1625
2*pt(7.543385)
2*pt(7.543385,0,1,df = 13)
pt(7.543385,0,1,df = 13)
1- pt(7.543385,0,1,df = 13)
p_beta_1 <- 2 * pt(-1*abs(t_beta_1),0,1,df = 13)
t_beta_1 <- 1.2258/0.1625
p_beta_1 <- 2 * pt(-1*abs(t_beta_1),0,1,df = 13)
p_beta_1
min(data$Midterm.Score)
max(data$Midterm.Score)
linspace = seq(74,97,0.01)
confInt = predict(model, linspace, interval = "confidence")
predInt = predict(model, linspace, interval = "prediction")
linspace = seq(74,97,0.01)
confInt = predict(model, data.frame(Midterm.Score = linspace), interval = "confidence")
predInt = predict(model, data.frame(Midterm.Score = linspace), linspace, interval = "prediction")
predInt = predict(model, data.frame(Midterm.Score = linspace), interval = "prediction")
plot(data$Midterm.Score, data$Final.Average, pch = 19)
confInt
plot(data$Midterm.Score, data$Final.Average, pch = 19)
points(linspace, confInt[,2], lwd = 2)
points(linspace, confInt[,3], lwd = 2)
linspace = seq(74,97,0.01)
confInt = predict(model, data.frame(Midterm.Score = linspace), interval = "confidence")
predInt = predict(model, data.frame(Midterm.Score = linspace), interval = "prediction")
plot(data$Midterm.Score, data$Final.Average, pch = 19)
points(linspace, confInt[,2], lwd = 1, col = 'blue')
points(linspace, confInt[,3], lwd = 1, col = 'blue')
points(linspace, predInt[,2], lwd = 1, col = 'blue')
points(linspace, predInt[,3], lwd = 1, col = 'blue')
linspace = seq(74,97,0.01)
confInt = predict(model, data.frame(Midterm.Score = linspace), interval = "confidence")
predInt = predict(model, data.frame(Midterm.Score = linspace), interval = "prediction")
plot(data$Midterm.Score, data$Final.Average, pch = 19)
points(linspace, confInt[,2], type = 'l', lwd = 1, col = 'blue')
points(linspace, confInt[,3], type = 'l', lwd = 1, col = 'blue')
points(linspace, predInt[,2], type = 'l', lwd = 1, col = 'red')
points(linspace, predInt[,3], type = 'l', lwd = 1, col = 'red')
qt(0.025, 0,1, 30)
pt(0.025, 0,1, 30)
pt(0.025, 0,1, df = 30)
qt(0.025, 0,1, df = 30)
qt(0.025, 0,1, df = 40)
qt(0.025, 0,1, df = 2)
qt(0.025, 0,1, df = 3)
summary(model)
predict(model, data.frame(Midterm.Score = 80), interval = "confidence")
confInt
linspace = seq(74,97,0.01)
confInt = predict(model, data.frame(Midterm.Score = linspace), interval = "confidence")
predInt = predict(model, data.frame(Midterm.Score = linspace), interval = "prediction")
plot(data$Midterm.Score, data$Final.Average, pch = 19)
#points(linspace, confInt[,2], type = 'l', lwd = 1, col = 'blue')
#points(linspace, confInt[,3], type = 'l', lwd = 1, col = 'blue')
points(linspace, predInt[,2], type = 'l', lwd = 1, col = 'red')
points(linspace, predInt[,3], type = 'l', lwd = 1, col = 'red')
linspace = seq(74,97,0.01)
confInt = predict(model, data.frame(Midterm.Score = linspace), interval = "confidence")
predInt = predict(model, data.frame(Midterm.Score = linspace), interval = "prediction")
plot(data$Midterm.Score, data$Final.Average, pch = 19)
points(linspace, confInt[,2], type = 'l', lwd = 1, col = 'blue')
points(linspace, confInt[,3], type = 'l', lwd = 1, col = 'blue')
points(linspace, predInt[,2], type = 'l', lwd = 1, col = 'red')
points(linspace, predInt[,3], type = 'l', lwd = 1, col = 'red')
d <- rnorm(9999,1,2) + rnorm(9999,2,3)
mean(d)
var(d)
sqrt(var(d))
library(PerformanceAnalytics)
library(zoo)
library(tseries)
SBUX_prices <- get.hist.quote(instrument="sbux",
start="2010-01-01",end="2015-08-31",
quote="AdjClose",provider="yahoo",
origin="1970-01-01",
compression="m",
retclass="zoo",
quiet=TRUE)
MSFT_prices <- get.hist.quote(instrument="msft",
start="2010-01-01",end="2015-08-31",
quote="AdjClose",provider="yahoo",
origin="1970-01-01",
compression="m",
retclass="zoo",
quiet=TRUE)
COKE_prices <- get.hist.quote(instrument="coke",
start="2010-01-01",end="2015-08-31",
quote="AdjClose",provider="yahoo",
origin="1970-01-01",
compression="m",
retclass="zoo",
quiet=TRUE)
index(SBUX_prices) <- as.yearmon(index(SBUX_prices))
index(MSFT_prices) <- as.yearmon(index(MSFT_prices))
index(COKE_prices) <- as.yearmon(index(COKE_prices))
head(all_prices)
all_prices = merge(MSFT_prices, COKE_prices, SBUX_prices)
head(all_prices)
colnames(all_prices) <- c("MSFT", "COKE", "SBUX")
simple_returns <- diff(all_prices)/lag(all_prices, k=-1);
head(simple_returns)
chart.Bar(simple_returns, legend.loc="bottom", main=" ")
chart.CumReturns(simple_returns, wealth.index = T, legend.loc="topleft", main = "Future Value of $1 invested")
return_matrix <- coredata(all_returns)
mu <- apply(return_matrix, 2, mean)
sd <- apply(return_matrix, 2, sd)
return_matrix <- coredata(all_returns)
coredata(simple_returns)
return_matrix <- coredata(simple_returns)
mu <- apply(return_matrix, 2, mean)
sd <- apply(return_matrix, 2, sd)
mu
sd
cov(return_matrix)
cov(return_matrix)*12
sqrt(var_hat_annual)
return_matrix <- coredata(simple_returns)
mu_hat_annual <- apply(return_matrix, 2, mean)*12
var_hat_annual <- apply(return_matrix, 2, var)*12
sigma_hat_annual <- sqrt(var_hat_annual)
cov_mat_annual <- cov(return_matrix)*12
cov_mat_annual
mu_hat_annual <- apply(return_matrix, 2, mean)*12
var_hat_annual
cov_mat_annual
top.mat = cbind(2*cov_mat_annual, rep(1,3))
bot.vec = c(rep(1,3),0)
Am.mat = rbind(top.mat, bot.vec)
b.vec = c(rep(0,3),1)
z.m.mat = solve(Am.mat) %*%  b.vec
x.vec = z.m.mat[1:3,1]
x.vec
mu.gmin = as.numeric(crossprod(x.vec, mu_hat_annual))
mu.gmin
mu_hat_annual
get_price <- function(stock){
get.hist.quote(instrument=stock,
start="2010-01-01",end="2015-08-31",
quote="AdjClose",provider="yahoo",
origin="1970-01-01",
compression="m",
retclass="zoo",
quiet=TRUE)
}
get_price()
get_price()
get_price('SBUX')
SBUX_prices <- get_price('sbux')
MSFT_prices <- get_price('msft')
COKE_prices <- get_price('coke')
index(SBUX_prices) <- as.yearmon(index(SBUX_prices))
index(MSFT_prices) <- as.yearmon(index(MSFT_prices))
index(COKE_prices) <- as.yearmon(index(COKE_prices))
1　＋　２
３　×　４
3 *4
rnorm(12,3,3)
formula = formula('damageY~distanceX')
shiny::runApp('D:/GithubRepos/Think_R/2015 R Study Group/Webapp Example Bentley On Campus Jobs')
train <- read.csv(file.choose(),
header = T,
stringsAsFactors = F)
View(train)
train$Survived <- factor(train$Survived)
train$Pclass <- factor(train$Pclass)
train$Sex <- factor(train$Sex)
formula = formula("Survived~Pclass+Sex+Age")
model <- glm(formula, data = train, family = "binomial")
model <- glm(formula, data = train, family = "binomial")
summary(model)
conTable <- table(predict(model, train) > 0.5, train$Survived)
conTable
(117+392)/sum(conTable)
test <- read.csv(file.choose(),
header = T,
stringsAsFactors = F)
str(test)
test$Pclass <- factor(test$Pclass)
test$Sex <- factor(test$Sex)
testpredict <- predict(model, test)
testpredict <- ifelse(is.na(testpredict),
runif(1,0,1),
testpredict)
prediction <- ifelse(testpredict > 0.5,
1,
0)
prediction
setwd("D:/GithubRepos/Think_R/2015 R Study Group/Sep18th")
data <- read.csv("Data.csv", stringsAsFactors = F)
head(data)
data <- read.csv("Data.csv")
head(data)
data <- read.csv("Data.csv")
head(data)
setwd("D:/GithubRepos/Think_R/2015 R Study Group/Sep18th")
data <- read.csv("Data.csv")
head(data)
h <- lm(formula = Price ~ Sq.Feet + Beds + Baths)
h <- lm(formula = Price ~ Sq.Feet + Beds + Baths, data = houseData)
houseData <- read.csv("Data.csv")
head(houseData)
h <- lm(formula = Price ~ Sq.Feet + Beds + Baths, data = houseData)
h
summary(h)
summary(lm(formula = Price ~ Sq.Feet^2 + Beds + Baths, data = houseData))
summary(lm(formula = Price ~ Sq.Feet + Beds/Sq.Feet + Baths, data = houseData))
h2 <- lm(formula = Price ~ Sq.Feet + Beds/Sq.Feet + Baths, data = houseData)
summary(h2)
h2 <- lm(formula = Price ~ Sq.Feet + Beds^2 + Baths,
data = houseData)
summary(h2)
summary(h)
h2 <- lm(formula = Price ~ Sq.Feet + Baths,
data = houseData)
summary(h2)
h3 <- lm(formula = Price ~ Sq.Feet,
data = houseData)
summary(h3)
h4 <- lm(formula = Price ~ Sq.Feet + Baths/Sq.Feet,
data = houseData)
summary(h4)
h4 <- lm(formula = Price ~ Sq.Feet + Beds/Sq.Feet,
data = houseData)
summary(h4)
h4 <- lm(formula = Price ~ Sq.Feet + Beds/Sq.Feet + Baths,
data = houseData)
summary(h4)
h4 <- lm(formula = Price ~ Sq.Feet + Beds/Sq.Feet + Baths + Beds * Baths,
data = houseData)
summary(h4)
h4 <- lm(formula = Price ~ Sq.Feet + Beds * Baths,
data = houseData)
summary(h4)
h5 <- lm(formula = Price ~ Sq.Feet + Beds * Baths + Beds/Sq.Feet + Baths/Sq.Feet + Beds*Baths/Sq.Feet + Sq.Feet^2 + Beds*Sq.Feet,
data = houseData)
summary(h5)
h5 <- lm(formula = Price ~ Sq.Feet + Beds * Baths + Beds/Sq.Feet + Baths/Sq.Feet + Beds*Baths/Sq.Feet + Sq.Feet^2,
data = houseData)
summary(h5)
data$IT1 <- data$Beds/data$Sq.Feet
data$IT2 <- data$Baths/data$Sq.Feet
data$IT3 <- data$Beds*data$Baths
data$IT4 <- data$Beds*data$Baths/data$Sq.Feet
data$IT5 <- data$Sq.Feet^2
data$Beds <- as.factor(as.character(data$Beds))
data$Baths <- as.factor(as.character(data$Baths))
model4 <- lm(Price~.-Address,data)
summary(model4)
model4 <- lm(Price~.-Address-Beds,data)
summary(model4)
model4 <- lm(Price~.-Address-Baths,data)
summary(model4)
data <- houseData
data$IT1 <- data$Beds/data$Sq.Feet
data$IT2 <- data$Baths/data$Sq.Feet
data$IT3 <- data$Beds*data$Baths
data$IT4 <- data$Beds*data$Baths/data$Sq.Feet
data$IT5 <- data$Sq.Feet^2
data$Beds <- as.factor(as.character(data$Beds))
data$Baths <- as.factor(as.character(data$Baths))
model4 <- lm(Price~.-Address-Baths,data)
summary(model4)
data <- houseData
data$IT1 <- data$Beds/data$Sq.Feet
data$IT2 <- data$Baths/data$Sq.Feet
data$IT3 <- data$Beds*data$Baths
data$IT4 <- data$Beds*data$Baths/data$Sq.Feet
data$IT5 <- data$Sq.Feet^2
data$Beds <- as.factor(as.character(data$Beds))
data$Baths <- as.factor(as.character(data$Baths))
g <- lm(Price~.-Address-Baths,data)
summary(g)
ft/length(ranks)*100
ft <= table(ranks)
ft
ft/length(ranks)
set.seed(123)
ranks <- as.factor(sample(10,40,replace = T ))
ranks
ft <- table(ranks)
ft
ft/length(ranks)
ft/length(ranks)*100
set.seed(234)
heights <- rnorm(40, 171, 5)
heights
min(heights)
max(heights)
b <- seq(min(heights), max(heights), 3)
heights.cut <- cut(heights, breaks = b, right = F)
table(heights.cut)
b <- seq(min(heights)-3, max(heights)+3, 3)
heights.cut <- cut(heights, breaks = b, right = F)
table(heights.cut)
min(heights)
b <- seq(min(heights)-2, max(heights)+2, 3)
heights.cut <- cut(heights, breaks = b, right = F)
table(heights.cut)
b <- seq(154, 181, 3)
heights.cut <- cut(heights, breaks = b, right = F)
table(heights.cut)
b <- seq(154, 181, 3)
heights.cut <- cut(heights, breaks = b, right = F)
cft <- table(heights.cut)
cft
cft/length(heights)
cft/length(heights) * 100
barplot(cft, border = 0, space = 0)
hist(heights)
hist(heights, breaks = b, right = F)
set.seed(123)
ranks <- as.factor(sample(10,40,replace = T ))
ranks
set.seed(234)
heights <- rnorm(40, 171, 5)
heights
mean(heights)
mean(heights)
median(heights)
mode(ranks)
quantile(heights, probs = 0.15, type = 6)
quantile(heights, probs = 0.25, type = 6)
quantile(heights, probs = 0.5, type = 6)
quantile(heights, probs = 0.75, type = 6)
quantile(heights, probs = 0.95, type = 6)
summary(heights)
boxplot(heights)
boxplot(heights, horizontal = T, pch = 8)
var(heights)
sd(heights)
sd(heights)/mean(heights)
cov(heights, weights)
cor(heights, weights)
set.seed(231)
weights <- heights/3+rnorm(40,0,0.5)
plot(weights, heights, pch = 19)
lines(x = rep(mean(weights),2), y = c(min(heights),max(heights)))
lines(y = rep(mean(heights),2), x = c(min(weights),max(weights)))
cov(heights, weights)
cor(heights, weights)
