?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
d <- SPARQL(url="http://services.data.gov.uk/reference/sparql",
query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",
ns=c('time','<http://www.w3.org/2006/time#>'))
is.data.frame(d$results)
View(d)
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
library(SPARQL)
library(igraph)
library(network)
library(ergm)
endpoint <- 'http://live.dbpedia.org/sparql'
options <- NULL
prefix <- c("db","http://dbpedia.org/resource/")
sparql_prefix <- "PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
"
q <- paste(sparql_prefix,
'SELECT ?actor ?movie ?director ?movie_date
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:American_films> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=prefix)
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=prefix)$results
endpoint <- 'http://dbpedia.org/sparql'
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=prefix)$results
View(res)
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)
prefix <- c("db","http://dbpedia.org/resource/")
sparql_prefix <- "PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
"
q <- paste(sparql_prefix,
'SELECT ?actor ?movie ?director ?movie_date
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:American_films> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>')$results
)
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>')$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))
res
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>')$results
)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
View(res)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
res <- SPARQL(url=endpoint,query=q,ns=prefix)
View(res)
View(res)
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
endpoint <- "http://semanticweb.cs.vu.nl/lop/sparql/"
q <-
"SELECT *
WHERE {
?event sem:hasPlace ?place .
?place eez:inPiracyRegion ?region .
}"
prefix <- c("lop","http://semanticweb.cs.vu.nl/poseidon/ns/instances/",
"eez","http://semanticweb.cs.vu.nl/poseidon/ns/eez/")
res <- SPARQL(endpoint,q,prefix)$results
pie(sort(table(res$region)),col=rainbow(12))
endpoint <- 'http://dbpedia.org/sparql'
options <- NULL
# Local Jena Fuseki endpoint
#endpoint <- "http://localhost:3030/movie/sparql"
#options <- "output=xml"
prefix <- c("db","http://dbpedia.org/resource/")
sparql_prefix <- "PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
"
q <- paste(sparql_prefix,
'SELECT ?actor ?movie ?director ?movie_date
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:American_films> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>')$results
）
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'）)$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- read.csv("sparql.csv")
View(res)
actor_movie_matrix <- as.matrix(ifelse(table(res$actor,res$movie) > 0, 1, 0))
a_m <- graph.incidence(actor_movie_matrix)
md <- cbind(res$movie,res$director)
movie_directors <- md[!duplicated(md[,1]),]
n_actors <- dim(actor_movie_matrix)[1]
n_movies <- dim(actor_movie_matrix)[2]
n_directors <- length(unique(res$director))
V(a_m)[1:n_actors]$kind <- "actor"
V(a_m)[n_actors+1:n_movies]$kind <- "movie"
V(a_m)[n_actors+1:n_movies]$director <- movie_directors[,2]
md <- cbind(res$movie,res$date)
movie_dates <- md[!duplicated(md[,1]),]
V(a_m)[n_actors+1:n_movies]$date_label <- sapply(movie_dates,as.character) # convert to string for Gephi
V(a_m)[n_actors+1:n_movies]$date_epoch <- movie_dates # for coloring
V(a_m)$name <- iconv(V(a_m)$name,to='ASCII',sub="")
V(a_m)$director <- iconv(V(a_m)$director,to='ASCII',sub="")
V(a_m)$Label <- V(a_m)$name
write.graph(a_m,'starring_dbpedia_american.graphml',format="graphml")
movie_director_matrix <- as.matrix(ifelse(table(res$movie,res$director) > 0, 1, 0))
actor_director_matrix <- actor_movie_matrix %*% movie_director_matrix
#a_d <- graph.incidence(actor_director_matrix,weighted=TRUE,mode="undirected")
a_d <- graph.incidence(actor_director_matrix,directed=FALSE,weighted=TRUE)
V(a_d)[1:n_actors]$kind <- "actor"
V(a_d)[n_actors+1:n_directors]$kind <- "director"
V(a_d)$name <- iconv(V(a_d)$name,to='ASCII',sub="")
# Gephi weights and labels
E(a_d)$Weight <- E(a_d)$weight / max(E(a_d)$weight) #FIXME
V(a_d)$Label <- V(a_d)$name
write.graph(a_d,'actor_director_dbpedia_american.graphml',format="graphml")
costar_matrix <- actor_movie_matrix %*% t(actor_movie_matrix)
diag(costar_matrix) <- 0 # remove self-loops
a_a <- graph.adjacency(costar_matrix,weighted=TRUE,mode="undirected")
V(a_a)$betweenness <- betweenness(a_a, directed=FALSE, normalized=TRUE)
E(a_a)$betweenness <- edge.betweenness(a_a, directed=FALSE)
V(a_a)$centrality <- evcent(a_a, weights=V(a_a)$weight)$vector
V(a_a)$lec_community <- as.character(leading.eigenvector.community(a_a)$membership)
kevin_bacon <- V(a_a)[V(a_a)$name=='"Kevin Bacon"@en']
kevin_bacon_degree <- shortest.paths(a_a,v=kevin_bacon,to=V(a_a))
V(a_a)$kevin_bacon_degree <- kevin_bacon_degree
kevin_bacon_hist <- hist(V(a_a)$kevin_bacon_degree,xlab="degrees of Kevin Bacon",main="Six degrees of Kevin Bacon")
sum(kevin_bacon_hist$intensities[1:6]) # percentage of people with KB degree <= 6
dd <- degree.distribution(a_a, cumulative=TRUE)
plot(dd,xlab="degree",ylab="cumulative frequency",main="Co-star degree distribution in Hollywood")
plot(dd,log="xy",xlab="degree",ylab="cumulative frequency",main="Co-star degree distribution in Hollywood")
d <- degree(a_a)
power.law.fit(d, xmin=1)
power.law.fit(d, xmin=10)
E(a_a)$Weight <- E(a_a)$weight
V(a_a)$name <- iconv(V(a_a)$name,to='ASCII',sub="")
V(a_a)$Label <- V(a_a)$name
write.graph(a_a,'costarring_dbpedia_american.graphml',format="graphml")
a_m_n <- as.network.matrix(actor_movie_matrix,bipartite=TRUE,directed=FALSE)
a_m_n %v% 'kind' <- V(a_m)$kind
a_m_n %v% 'director' <- V(a_m)$director
e <- ergm(n ~ edges + b2factor('director'))
summary(e)
library(SPARQL)
library(igraph)
library(network)
library(ergm)
# Live DBpedia endpoint
endpoint <- 'http://dbpedia.org/sparql'
options <- NULL
# Local Jena Fuseki endpoint
#endpoint <- "http://localhost:3030/movie/sparql"
#options <- "output=xml"
prefix <- c("db","http://dbpedia.org/resource/")
sparql_prefix <- "PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
"
q <- paste(sparql_prefix,
'SELECT ?actor ?movie ?director ?movie_date
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:American_films> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- SPARQL(url=endpoint,query="SELECT * WHERE { ?s ?p ?o . } LIMIT 10",ns=c('time','<http://www.w3.org/2006/time#>'))$results
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
library(SPARQL)
library(igraph)
library(network)
library(ergm)
endpoint <- 'http://dbpedia.org/sparql'
options <- NULL
prefix <- c("db","http://dbpedia.org/resource/")
sparql_prefix <- "PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
"
q <- paste(sparql_prefix,
'SELECT ?actor ?movie ?director ?movie_date
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:American_films> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
res <- SPARQL(url=endpoint,query=q,ns=prefix)$results
res <- read.csv("sparql.csv")
View(res)
actor_movie_matrix <- as.matrix(ifelse(table(res$actor,res$movie) > 0, 1, 0))
a_m <- graph.incidence(actor_movie_matrix)
md <- cbind(res$movie,res$director)
movie_directors <- md[!duplicated(md[,1]),]
n_actors <- dim(actor_movie_matrix)[1]
n_movies <- dim(actor_movie_matrix)[2]
n_directors <- length(unique(res$director))
# Find dates of movies
md <- cbind(res$movie,res$date)
movie_dates <- md[!duplicated(md[,1]),]
V(a_m)[n_actors+1:n_movies]$date_label <- sapply(movie_dates,as.character) # convert to string for Gephi
V(a_m)[n_actors+1:n_movies]$date_epoch <- movie_dates # for coloring
# Remove non-ASCII characters (for Gephi)
V(a_m)$name <- iconv(V(a_m)$name,to='ASCII',sub="")
V(a_m)$director <- iconv(V(a_m)$director,to='ASCII',sub="")
# Use names as labels in Gephi
V(a_m)$Label <- V(a_m)$name
write.graph(a_m,'starring_dbpedia_american.graphml',format="graphml")
install.packages("igraph")
install.packages("tcltk")
install.packages("tcltk")
librar("tcltk")
library("tcltk")
library(igraph)
library(tcltk)
source('~/.active-rstudio-document', echo=TRUE)
library(igraph)
library(tcltk)
G = read.graph("LadaFacebookAnon.gml",format="gml")
library(igraph)
install.packages("igraph")
library(igraph)
library(tcltk)
G = read.graph("LadaFacebookAnon.gml",format="gml")
?read.graph
G = read.graph("LadaFacebookAnon.gml",format="gml")
setwd("D:/GithubRepos/Think_R/2015 R Study Group/Oct 9th")
G = read.graph("LadaFacebookAnon.gml",format="gml")
summary(G)
tkplot(G, layout=layout.fruchterman.reingold, canvas.width = 450, canvas.height= 450, vertex.size=5,vertex.label=NA,edge.curved=T )
degree(G, V=V(G, mode = c("all"), loops = TRUE, normalized = F)
)
degree(G, V=V(G, mode = c("all"), loops = TRUE, normalized = F))
?degree
degree(G, V=V(G, mode = c("all"), loops = TRUE, normalized = F))
degree(G, V=V(G), mode = c("all"), loops = TRUE, normalized = F)
degree(G, V=V(G), mode = c("all"))
G
degree(G, v=V(G), mode = c("all"), loops = T, normalized = F)
hist(degree(G, v=V(G), mode = c("all"), loops = T, normalized = F))
library(ggplot2)
library(ggthemes)
theme_set(theme_minimal())
G.degree <- degree(G, v=V(G), mode = c("all"), loops = T, normalized = F)
G.degree
qplot(G.degree)
qplot(x G.degree, binwidth = 2)
qplot(x = G.degree, binwidth = 2)
qplot(x = G.degree, binwidth = 1)
qplot(x = G.degree, binwidth = 5)
qplot(x = G.degree, binwidth = 6)
qplot(x = G.degree, binwidth = 10)
qplot(x = G.degree, binwidth = 10, geom = "freqpoly")
qplot(x = G.degree, geom = "freqpoly")
qplot(x = G.degree, geom = "freqpoly", binwidth = 1)
qplot(x = G.degree, geom = "freqpoly", binwidth = 2)
qplot(x = G.degree, geom = "freqpoly", binwidth = 3)
?igraph
plot(G)
plot.igraph(G, size = G.degree)
plot.igraph(G, layout = layout_with_fr, vertex.size = G.degree)
G.degree
normalize(G.degree)
?normalize
?Normal
G.degreeZ <- (G.degree-mean(G.degree))/sd(G.degree)
plot.igraph(G, layout = layout_with_fr, vertex.size = G.degreeZ)
G.degree_bin_10 <- round(G.degree/10,0)
plot.igraph(G, layout = layout_with_fr, vertex.size = G.degree_bin_10)
plot.igraph(G, layout = layout_with_fr, vertex.size = G.degree_bin_10, vertex.label = NA)
wc <- walktrap.community(G)
dendPlot(wc, mode = getIgraphOpt("dend.plot.type"),use.modularity = FALSE)
com <- edge.betweenness.community(G, directed = F, modularity = T, merges = T)
plot(com,G, layout = layout.kamada.kawai, vertex.size = 5, vertex.shape = "circle", vertex.label = NA)
plot(com,
G,
layout = layout.kamada.kawai,
vertex.size = G.degree_bin_5,
vertex.shape = "circle",
vertex.label = NA)
com
com$modularity
com$membership
?plot.igraph
plot(com,
G,
layout = layout.kamada.kawai,
vertex.size = G.degree_bin_5,
mark.border = NA,
vertex.shape = "circle",
vertex.label = NA)
G.degree_bin_5 <- round(G.degree/5,0)
plot(com,
G,
layout = layout.kamada.kawai,
vertex.size = G.degree_bin_5,
mark.border = NA,
vertex.shape = "circle",
vertex.label = NA)
